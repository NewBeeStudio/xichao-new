{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"i",
				"ifmain	if __name__ == '__main__'"
			],
			[
				"num",
				"numOf1"
			],
			[
				"nu",
				"numOf0"
			],
			[
				"cur",
				"curTime-q1"
			],
			[
				"wa",
				"waitTimeOf0"
			],
			[
				"de",
				"deQueue"
			],
			[
				"h",
				"h_process"
			],
			[
				"resort",
				"resortalbum"
			],
			[
				"album",
				"albumnum"
			],
			[
				"m",
				"min-height"
			],
			[
				"post-",
				"post-full"
			],
			[
				"post",
				"post_form"
			],
			[
				"back",
				"background-size"
			],
			[
				"no",
				"no-repeat"
			],
			[
				"hei",
				"min-height"
			],
			[
				"font",
				"font-style"
			],
			[
				"ex",
				"expect_num"
			],
			[
				"res",
				"results_per_page"
			],
			[
				"wi",
				"writeFile"
			],
			[
				"app",
				"appendChild"
			],
			[
				"get",
				"getURL"
			],
			[
				"findA",
				"findAll"
			],
			[
				"pr",
				"print"
			]
		]
	},
	"buffers":
	[
		{
			"file": "forms.py",
			"settings":
			{
				"buffer_size": 1898,
				"line_ending": "Unix"
			}
		},
		{
			"file": "admins.py",
			"settings":
			{
				"buffer_size": 5992,
				"line_ending": "Unix"
			}
		},
		{
			"file": "views.py",
			"settings":
			{
				"buffer_size": 79055,
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/layout_article.html",
			"settings":
			{
				"buffer_size": 593,
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/square.html",
			"settings":
			{
				"buffer_size": 10819,
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/layout.html",
			"settings":
			{
				"buffer_size": 16103,
				"line_ending": "Unix"
			}
		},
		{
			"file": "static/css/main.css",
			"settings":
			{
				"buffer_size": 7919,
				"line_ending": "Unix"
			}
		},
		{
			"file": "static/css/square.css",
			"settings":
			{
				"buffer_size": 6572,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nCTags:\n-----\n\n  =====\n  CTags\n  =====\n  \n  .. image:: https://travis-ci.org/SublimeText/CTags.svg?branch=development\n      :target: https://travis-ci.org/SublimeText/CTags\n  \n  About\n  =====\n  \n  This `Sublime Text 2/3`_ package provides support for working with tags\n  generated by `Exuberant CTags`_\n  \n  .. _Sublime Text 2/3: http://sublimetext.com/\n  .. _Exuberant CTags: http://ctags.sourceforge.net/\n  \n  The ctags command is searched for on the system PATH. It works by doing a\n  binary search of a memory-mapped tags file, so it will work efficiently with\n  very large (50MB+) tags files if needed.\n  \n  See this `forum thread`_ for a bit of historical background on the Sublime Text plugin.\n  \n  .. _forum thread: http://www.sublimetext.com/forum/viewtopic.php?f=5&t=144\n  \n  Installation\n  ============\n  \n  The easiest way to install this plugin, is to use the `Package Control`_ \n  plugin, by `Will Bond`_\n  \n  .. _Package Control: http://wbond.net/sublime_packages/package_control/\n  .. _Will Bond: http://wbond.net/\n  \n  Alternatively, the plugin can be installed manually using one of the following\n  methods.\n  \n  Using Git\n  ---------\n  Go to your Sublime Text Packages directory and clone the repository\n  using the command below::\n  \n    $ git clone https://github.com/SublimeText/CTags\n  \n  Manual Download\n  ---------------\n  \n  * Download the files using the .zip download option\n  * Unzip the files (and rename the folder to CTags if needed)\n  * Copy the folder to your Sublime Text Packages directory\n  \n  Additional Setup Steps\n  ======================\n  \n  OS X\n  ----\n  \n  The default ``ctags`` executable in OSX does not support recursive directory\n  search (i.e. ``ctags -R``). To get a proper copy of ctags, use one of the\n  following options:\n  \n  * Using `Homebrew`_::\n  \n      brew install ctags\n  \n  * Using `MacPorts`_::\n  \n      port install ctags\n  \n  .. _`Homebrew`: http://mxcl.github.com/homebrew/\n  .. _`MacPorts`: http://www.macports.org/\n  \n  Ensure that the ``PATH`` is updated so the correct version is run:\n  \n  * If ``which ctags`` doesn't point at ctags in ``/usr/local/bin``, make sure\n    you add ``/usr/local/bin`` to your ``PATH`` ahead of the folder \n    ``which ctags`` reported.\n  * Alternatively, add the path to the new ``ctags`` executable to the settings,\n    under ``command``. If you have Xcode / Apple Developer Tools installed this\n    path will likely be ``/usr/local/bin/ctags``.\n  \n  Linux\n  -----\n  \n  To install ctags use your package manager. \n  \n  * For Debian-based systems (Ubuntu, Mint, etc.)::\n  \n      sudo apt-get install exuberant-ctags\n  \n  * For Red Hat-based systems (Red Hat, Fedora, CentOS)::\n  \n      sudo yum install ctags\n  \n  And so forth\n  \n  Windows\n  -------\n  \n  * Download the `CTags binary`_ from the `Exuberant CTags`_ site.\n  * Extract ``ctags.exe`` from the downloaded zip to \n    ``C:\\Program Files\\Sublime Text 2`` or any folder within your PATH so that\n    Sublime Text can run it.\n  * Alternatively, extract to any folder and add the path to this folder to\n    the ``command`` setting.\n  \n  .. _CTags binary: http://prdownloads.sourceforge.net/ctags/ctags58.zip\n  \n  Usage\n  =====\n  \n  This uses tag files created by the ``ctags -R -f .tags`` command by default\n  (although this can be overriden in settings).\n  \n  The plugin will try to find a ``.tags`` file in the same directory as the\n  current view, walking up directories until it finds one. If it can't find one\n  it will offer to build one (in the directory of the current view)\n  \n  If a symbol can't be found in a tags file, it will search in additional\n  locations that are specified in the ``CTags.sublime-settings`` file (see \n  below).\n  \n  If you are a Rubyist, you can build a Ruby Gem's tags with the following\n  script::\n  \n    require 'bundler'\n    paths = Bundler.load.specs.map(&:full_gem_path)\n    system(\"ctags -R -f .gemtags #{paths.join(' ')}\")\n  \n  Settings\n  ========\n  \n  By default, Sublime will include ctags files in your project, which causes\n  them to show up in the file tree and search results. To disable this behaviour\n  you should add a ``file_exclude_patterns`` entry to your \n  ``Preferences.sublime-settings`` or your project file. For example::\n  \n    \"file_exclude_patterns\": [\".tags\", \".tags_sorted_by_file\", \".gemtags\"]\n  \n  In addition to this setting, there's a ``CTags.sublime-settings`` file, which\n  can be edited like any other ``.sublime-settings`` file\n  \n  * ``filters`` will allow you to set scope specific filters against a field of\n    the tag. In the excerpt above, imports tags like ``from a import b`` are \n    filtered::\n  \n      '(?P<symbol>[^\\t]+)\\t'\n      '(?P<filename>[^\\t]+)\\t'\n      '(?P<ex_command>.*?);\"\\t'\n      '(?P<type>[^\\t\\r\\n]+)'\n      '(?:\\t(?P<fields>.*))?'\n  \n  * ``extra_tag_paths`` is a list of extra places to look for keyed by \n  * ``(selector, platform)``. Note the ``platform`` is tested against \n    ``sublime.platform()`` so any values that function returns are valid.\n  * ``extra_tag_files`` is a list of extra files relative to the original file\n  * ``command`` is the path to the version of ctags to use, for example::\n  \n      \"command\" : \"/usr/local/bin/ctags\"\n  \n    or::\n  \n      \"command\" : \"C:\\Users\\<username>\\Downloads\\CTags\\ctag.exe\"\n  \n  The rest of the options are fairly self explanatory.\n  \n  Support\n  =======\n  \n  If there are any problems or you have a suggestion, `open an issue`_, and we\n  will receive a notification.\n  \n  .. _open an issue: https://github.com/SublimeText/CTags/issues\n  \n  Thanks :)\n  \n  Commands Listing\n  ================\n  \n  ==============================  ================  ===========  ======================\n  Command                         Key Binding       Alt Binding  Mouse Binding\n  ==============================  ================  ===========  ======================\n  rebuild_ctags                   ctrl+t, ctrl+r\n  navigate_to_definition          ctrl+t, ctrl+t    ctrl+>       ctrl+shift+left_click\n  jump_prev                       ctrl+t, ctrl+b    ctrl+<       ctrl+shift+right_click\n  show_symbols                    alt+s\n  show_symbols (all files)        alt+shift+s\n  show_symbols (suffix)           ctrl+alt+shift+s\n  ==============================  ================  ===========  ======================\n  \n  ",
			"settings":
			{
				"buffer_size": 6363,
				"line_ending": "Windows",
				"name": "Package Control Messages",
				"scratch": true
			}
		},
		{
			"file": "models.py",
			"settings":
			{
				"buffer_size": 28665,
				"line_ending": "Unix"
			}
		},
		{
			"file": "xichao.sublime-project",
			"settings":
			{
				"buffer_size": 97,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# -*- coding: utf-8 -*-\n'''\n\n	功能函数模块\n\n	实现一些数据库基本的功能，被高层次代码所调用\n\n'''\nfrom xichao import app\nfrom hashlib import md5\nfrom models import User,Article,Special,Book,Comment,Article_session,Activity_session,Activity,Comment_activity,Collection_Special,Collection_User,Collection_Article,Collection_Activity,HomePage\nfrom database import db_session\nfrom flask import jsonify,render_template,request,session\nfrom sqlalchemy import or_, not_, and_, desc\nfrom werkzeug import secure_filename\nfrom datetime import datetime\nfrom flask.ext.mail import Mail\nfrom flask.ext.mail import Message\nfrom flask.ext.sqlalchemy import Pagination\nimport re\nimport os\nimport shutil\nimport models\n\n\n##################################  注册函数  ####################################\ndef nick_exist(nick):\n	result=db_session.query(User).filter_by(nick=nick).all()\n	if len(result)>0:\n		return True\n	else:\n		return False\n\ndef email_exist(email):\n	result=db_session.query(User).filter_by(email=email).all()\n	if len(result)>0:\n		return True\n	else:\n		return False\n\ndef encrypt(password):\n	encrypt_password=md5(password).hexdigest()\n	return encrypt_password\n\nALLOWED_EXTENSIONS=['jpg']\ndef allowed_file(filename):\n	return '.' in filename and filename.rsplit('.',1)[1] in ALLOWED_EXTENSIONS\n\ndef get_state(nick,password):\n	result=db_session.query(User).filter(and_(User.nick==nick,User.password==password)).all()\n	if len(result)>0:\n		return result[0].state\n	else:\n		return False\ndef update_state(nick):\n	db_session.query(User).filter(User.nick==nick).update({'state':'1'})\n	db_session.commit()\n\ndef get_secure_photoname(filename):\n	secured_filename=secure_filename(filename)\n	photoname=secured_filename.rsplit('.',1)[0]+datetime.now().strftime('%Y%m%d%H%M%S')+'.'+secured_filename.rsplit('.',1)[1]\n	return photoname\n\ndef send_verify_email(nick,password,email):\n    verify_url=app.config['HOST_NAME']+'/verify?nick='+nick+'&secret='+password\n    mail=Mail(app)\n    msg=Message(u'曦潮书店',sender='xichao_test@163.com',recipients=[email])\n    msg.body='text body'\n    msg.html = render_template('test_verify_email.html',verify_url=verify_url)\n    with app.app_context():\n        try:\n            mail.send(msg)\n        except:\n            print \"\\n\\n\\n\\n\\n\\n\", \"NoNoNoNoNoNoNo!\", \"\\n\\n\\n\\n\\n\\n\"\n            pass\n\n##################################  登陆函数  ####################################\ndef get_nick(email,password):\n	result=db_session.query(User).filter(and_(User.email==email,User.password==encrypt(password))).all()\n	if len(result)>0:\n		return result[0].nick\n	else:\n		return False\n\n##################################  忘记/重设密码 #################################\n#通过email获取nick\ndef get_nick_by_email(email):\n	nick = db_session.query(User.nick).filter_by(email=email).first()\n	return nick[0]\n\n#通过email获取password\ndef get_password_by_email(email):\n	password = db_session.query(User.password).filter_by(email=email).first()\n	return password[0]\n\n#发送重设密码邮件\ndef send_resetpassword_email(nick,password,email):\n	verify_url=app.config['HOST_NAME']+'/resetPassword/'+nick+'/'+password #/nick/MD5(password)\n	mail=Mail(app)\n	msg=Message(u'重置曦潮网站的密码',sender='xichao_test@163.com',recipients=[email])\n	msg.body='text body'\n	msg.html = render_template('test_verify_email.html',verify_url=verify_url)\n	with app.app_context():\n		try:\n			mail.send(msg)\n		except:\n			pass\n\n#是否存在该用户名，用户名和密码是否匹配\ndef check_nickpassword_match(nick, password):\n	pw = db_session.query(User.password).filter_by(nick=nick).all()\n	if not len(pw): #不存在nick\n		return False \n	elif pw[0][0] != password:\n		return False\n	else:\n		return True\n\n#更新密码\ndef update_password(nick, password):\n	user = db_session.query(User).filter_by(nick=nick).scalar()\n	user.password = encrypt(password)\n	db_session.commit()\n\n##################################  文章函数  ####################################\ndef get_article_session_id():\n    article_session = Article_session()\n    db_session.add(article_session)\n    db_session.commit()\n    result=db_session.query(Article_session.article_session_id).order_by(desc(Article_session.article_session_id)).first()\n    return result[0]\ndef get_activity_session_id():\n	activity_session=Activity_session()\n	db_session.add(activity_session)\n	db_session.commit()\n	result=db_session.query(Activity_session.activity_session_id).order_by(desc(Activity_session.activity_session_id)).first()\n	return result[0]\n\n#添加文章\ndef create_article(title,content,title_image,article_session_id,is_draft,user_id,group_id,category_id,abstract,book_id,special_id=None):\n	result=db_session.query(Article).filter_by(article_session_id=article_session_id).all()\n	if len(result)>0:\n		article=db_session.query(Article).filter_by(article_session_id=article_session_id).scalar()\n		article.title=title\n		article.content=content\n		article.picture=title_image\n		article.time=datetime.now()\n		article.is_draft=is_draft\n		article.abstract=abstract\n		article.book_id=book_id\n		article.special_id=special_id\n		db_session.commit()\n		return result[0].article_id\n	else:\n		article=Article(title=title,content=content,picture=title_image,time=datetime.now(),user_id=user_id,article_session_id=article_session_id,is_draft=is_draft,groups=group_id,category=category_id,abstract=abstract,book_id=book_id,special_id=special_id)\n		db_session.add(article)\n		db_session.commit()\n		result=db_session.query(Article).filter_by(article_session_id=article_session_id).first()\n		return result.article_id\n		\n\ndef create_book(book_picture,book_author,book_press,book_page_num,book_price,book_press_time,book_title,book_ISBN,book_binding):\n	result=db_session.query(Book).filter_by(ISBN=book_ISBN).all()\n	if len(result)>0:\n		book=db_session.query(Book).filter_by(ISBN=book_ISBN).scalar()\n		book.favor+=1\n		db_session.commit()\n		return result[0].book_id\n	else:\n		book=Book(title=book_title,ISBN=book_ISBN,picture=book_picture,author=book_author,press=book_press,page_num=book_page_num,price=book_price,press_time=book_press_time,binding=book_binding)\n		db_session.add(book)\n		db_session.commit()\n		result=db_session.query(Book).filter_by(ISBN=book_ISBN).first()\n		return result.book_id\n\ndef create_activity(title,content,title_image,activity_session_id,activity_time,abstract,place):\n	result=db_session.query(Activity).filter_by(activity_session_id=activity_session_id).all()\n	if len(result)>0:\n		activity=db_session.query(Activity).filter_by(activity_session_id=activity_session_id).scalar()\n		activity.name=title\n		activity.content=content\n		activity.picture=title_image\n		activity.create_time=datetime.now()\n		activity.activity_time=activity_time\n		activity.abstract=abstract\n		activity.place=place\n		db_session.commit()\n		return activity.activity_id\n	else:\n		activity=Activity(name=title,content=content,picture=title_image,create_time=datetime.now(),activity_session_id=activity_session_id,activity_time=activity_time,abstract=abstract,place=place)\n		db_session.add(activity)\n		db_session.commit()\n		result=db_session.query(Activity).filter_by(activity_session_id=activity_session_id).first()\n		return result.activity_id\n\ndef get_user_id(nick):\n	user_id=db_session.query(User.user_id).filter_by(nick=nick).first()\n	return user_id[0]\n\n\n#返回1个元组，result[0][0]是Article类的数据库实例，result[0][1]是该Article实例所对应的User.nick,是字符串,result[0][2]是该Article实例所对应的Book实例\ndef get_article_information(article_id):\n	result=db_session.query(Article,User,Book).join(User,Book).filter(Article.article_id==article_id).all()\n	#print result[0]\n	if len(result)>0:\n		return result[0]\n	else:\n		return None\n\ndef get_activity_information(activity_id):\n	result=db_session.query(Activity).filter_by(activity_id=activity_id).all()\n	if len(result)>0:\n		return result[0]\n	else:\n		return None\n\n#返回一个列表，列表中的元素为元组，result[x][0]是Comment类的数据库实例，result[x][1]是该Comment所对应的用户昵称,result[x][2]是该Comment所对应的用户头像\ndef get_article_comments(article_id):\n	result=db_session.query(Comment,User.nick,User.photo).join(User,Comment.user_id==User.user_id).filter(Comment.article_id==article_id).order_by(desc(Comment.time)).all()\n	if len(result)>0:\n		return result\n	else:\n		return None\n\ndef get_activity_comments(activity_id):\n	result=db_session.query(Comment_activity,User.nick,User.photo).join(User,Comment_activity.user_id==User.user_id).filter(Comment_activity.activity_id==activity_id).order_by(desc(Comment_activity.time)).all()\n	if len(result)>0:\n		return result\n	else:\n		return None\n\ndef update_read_num(article_id):\n	article=db_session.query(Article).filter_by(article_id=article_id).scalar()\n	article.read_num+=1\n	db_session.commit()\n\n\ndef update_read_num_activity(activity_id):\n	activity=db_session.query(Activity).filter_by(activity_id=activity_id).scalar()\n	activity.read_num+=1\n	db_session.commit()\n	\n\n##################################  首页函数  ####################################\n\ndef get_homepage_specials():\n    query = db_session.query(HomePage).all()[0]\n    special1 = db_session.query(Special).filter_by(special_id = query.special1).all()[0]\n    special2 = db_session.query(Special).filter_by(special_id = query.special2).all()[0]\n    special3 = db_session.query(Special).filter_by(special_id = query.special3).all()[0]\n    special4 = db_session.query(Special).filter_by(special_id = query.special4).all()[0]\n    return [special1, special2, special3, special4], [query.special1_image, query.special2_image, query.special3_image, query.special4_image]\n    \ndef get_hot_articles(num):\n    query = db_session.query(Article).order_by(Article.favor.desc()).all()\n    return query[:10]\n    \ndef get_all_special():\n    query = db_session.query(Special).order_by(Special.favor.desc()).all()\n    return query\n    \ndef modify_homepage_func(special1, url1,\n                         special2, url2,\n                         special3, url3,\n                         special4, url4):\n    \n    special1 = db_session.query(Special).filter_by(name = special1).all()\n    if (len(special1) == 0):\n        return '1'\n    special2 = db_session.query(Special).filter_by(name = special2).all()\n    if (len(special2) == 0):\n        return '2'\n    special3 = db_session.query(Special).filter_by(name = special3).all()\n    if (len(special3) == 0):\n        return '3'\n    special4 = db_session.query(Special).filter_by(name = special4).all()\n    if (len(special4) == 0):\n        return '4'\n\n    special1 = special1[0].special_id\n    special2 = special2[0].special_id\n    special3 = special3[0].special_id\n    special4 = special4[0].special_id\n    \n    query = db_session.query(HomePage).all()[0]\n    query.special1 = special1\n    query.special2 = special2\n    query.special3 = special3\n    query.special4 = special4\n\n\n    query.special1_image = url1\n    query.special2_image = url2\n    query.special3_image = url3\n    query.special4_image = url4\n\n\n    db_session.commit()\n    return 'success'\n    \n##################################  专栏函数  ####################################\ndef get_all_specials(sort, page_id):\n    if sort == 'time':\n        query = db_session.query(Special).order_by(Special.last_modified.desc())\n    else:\n        query = db_session.query(Special).order_by(Special.coin.desc())\n    return paginate(query = query, page = page_id, per_page = 5, error_out = True)\n    \ndef get_search_specials(search):\n    query = db_session.query(Special).filter(Special.name.like('%'+search+'%')).order_by(Special.coin.desc())\n    return paginate(query = query, page = 1, error_out = True)\n\ndef create_special_authorized():\n	nick=None\n	if 'user_id' in session:\n		result = db_session.query(User).filter_by(user_id=int(session['user_id'])).all()[0]\n		return result.role == 3\n		## 专栏作家或者管理员\n	else:\n	    return False\n\ndef create_new_special(name, user_id, picture, introduction):\n    special = Special(name = name, user_id = user_id,\n                       picture = picture, introduction = introduction,\n                       time = datetime.now())\n    db_session.add(special)\n    db_session.commit()\n    return db_session.query(Special).filter_by(user_id = user_id, name = name).all()[0].special_id\n    \ndef modify_special_func(name, user_id, picture, introduction):\n    print \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHERE\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"\n    query = db_session.query(Special).filter_by(name = name, user_id = user_id).all()\n    if (len(query) == 0):\n        raise Exception\n    special = query[0]\n    special.picture = picture\n    special.introduction = introduction\n    db_session.commit()\n    return special.special_id\n    \ndef get_userid_by_nick(nick):\n    return db_session.query(User.user_id).filter_by(nick=nick).all()\n\ndef get_nick_by_userid(user_id):\n    return db_session.query(User.nick).filter_by(user_id=user_id).all()[0][0]\n\ndef get_userid_from_session():\n	nick=None\n	if 'user_id' in session:\n		result = db_session.query(User).filter_by(user_id=int(session['user_id'])).all()\n		return result[0].user_id\n	return 0\n\ndef get_special_author(userid):\n    result = db_session.query(User).filter_by(user_id = userid)\n    return result[0]\n\ndef get_special_information(special_id):\n#	result=db_session.query(Special,User.nick).join(User).filter(Special.special_id==special_id).all()\n    result = db_session.query(Special).filter_by(special_id = special_id).all()\n    if len(result)>0:\n        return result[0]\n    else:\n        return None\n        \ndef get_special_collect_info(user_id, special_id):\n    query = db_session.query(Collection_Special).filter_by(user_id = user_id, special_id = special_id).all()\n    return len(query)\n    \ndef get_author_collect_info(user_id, author_id):\n    query = db_session.query(Collection_User).filter_by(user_id = user_id, another_user_id = author_id).all()\n    return len(query)\n\ndef get_special_article(special_id, page_id, sort, per_page):\n    if sort == \"time\":\n#        print ddd\n        query = db_session.query(Article).filter_by(special_id = special_id, is_draft = '0').order_by(Article.time.desc())\n    else:\n        query = db_session.query(Article).filter_by(special_id = special_id, is_draft = '0').order_by(Article.coins.desc())\n\n    pagination = paginate(query = query, page = page_id, per_page = per_page, error_out = True)\n    return pagination\n    \ndef get_special_draft(special_id):\n    return db_session.query(Article).filter_by(special_id = special_id, is_draft = '1').all()\n    \ndef get_special_author_other(user_id):\n    query = db_session.query(Special.name,Special.special_id).filter_by(user_id = user_id).all()\n    return query\n\n\ndef update_article_num_for_special(special_id,is_add):\n	special=db_session.query(Special).filter_by(special_id=special_id).scalar()\n	if is_add:\n		special.article_num+=1\n	else:\n		special.article_num-=1\n	db_session.commit()\n\n###################################  昵称函数  ####################################\ndef getNick():\n	nick=None\n	if 'user_id' in session:\n		result = db_session.query(User.nick).filter_by(user_id=int(session['user_id'])).first()\n		nick = result[0]\n	\n	# nick = None\n	# if 'user' in session:\n	# 	nick = session['user']\n	# elif request.cookies.get('user')!=None:\n	# 	nick = request.cookies.get('user')\n	return nick\n\n###################################  头像函数  ####################################\ndef get_avatar():\n	nick=getNick()\n	avatar=db_session.query(User.photo).filter_by(nick=nick).first()\n	return avatar[0]\n###################################  评论函数  ####################################\ndef create_comment(content,to_user_id,article_id):\n	user_id=int(session['user_id'])\n	comment=Comment(article_id=article_id,content=content,user_id=user_id,to_user_id=to_user_id,time=datetime.now())\n	db_session.add(comment)\n	db_session.commit()\ndef update_comment_num(article_id,is_add):\n	article=db_session.query(Article).filter_by(article_id=article_id).scalar()\n	if is_add:\n		article.comment_num+=1\n	else:\n		article.comment_num-=1\n	db_session.commit()\n\ndef create_activity_comment(content,activity_id):\n	user_id=int(session['user_id'])\n	comment_activity=Comment_activity(activity_id=activity_id,content=content,user_id=user_id,time=datetime.now())\n	db_session.add(comment_activity)\n	db_session.commit()\ndef update_activity_comment_num(activity_id):\n	activity=db_session.query(Activity).filter_by(activity_id=activity_id).scalar()\n	activity.comment_num+=1\n	db_session.commit()\n\n\n###################################  获取文章摘要函数  ###############################\ndef get_abstract_plain_text(abstract):\n	img_list=re.findall('<img.*?>',abstract)\n	for img_r in img_list:\n		abstract=abstract.replace(img_r,'')\n	return abstract\n\n\n###################################  分页函数  ######################################\n##源自官方的实现\ndef paginate(query,page,per_page=20,error_out=True):\n	if error_out and page < 1:\n		abort(404)\n	items = query.limit(per_page).offset((page - 1) * per_page).all()\n	if not items and page != 1 and error_out:\n		abort(404)\n	if page == 1 and len(items) < per_page:\n		total = len(items)\n	else:\n		total = query.order_by(None).count()\n	return Pagination(query, page, per_page, total, items)\n\n\n\n###################################  获取文章组函数  #################################\ndef get_article_pagination_by_favor(group_id,category_id,page_id):\n	query=db_session.query(Article).filter(and_(Article.groups==group_id,Article.category==category_id)).order_by(desc(Article.favor))\n	return paginate(query,page_id,5,False)\ndef get_article_pagination_by_time(group_id,category_id,page_id):\n	query=db_session.query(Article).filter(and_(Article.groups==group_id,Article.category==category_id)).order_by(desc(Article.time))\n	return paginate(query,page_id,5,False)\n	\n	\n##################################  收藏/取消收藏 专栏  ####################################\ndef collection_special(user_id, special_id):\n    query = db_session.query(Collection_Special).filter_by(user_id = user_id, special_id = special_id).all()\n    if len(query) == 0:\n        collect_spe = Collection_Special(user_id = user_id, \n                                         special_id = special_id,\n                                         time = datetime.now())\n        query = db_session.query(Special).filter_by(special_id = special_id).all()[0]\n        query.favor += 1\n        \n        db_session.add(collect_spe)\n        db_session.commit()\n        \n    else:\n        raise Exception\n\ndef collection_special_cancel(user_id, special_id):\n    query = db_session.query(Collection_Special).filter_by(user_id = user_id, special_id = special_id).all()\n    if len(query) != 0:\n        db_session.delete(query[0])\n        query = db_session.query(Special).filter_by(special_id = special_id).all()[0]\n        query.favor -= 1\n        db_session.commit()\n        \n    else:\n        raise Exception\n\n        \n##################################  收藏/取消收藏 专栏作家  ####################################\ndef collection_special_author(user_id, special_id):\n    query = db_session.query(Special).filter_by(special_id = special_id).all()\n    another_user_id = query[0].user_id\n    if (user_id == another_user_id):\n        return \"self\"\n    query = db_session.query(Collection_User).filter_by(user_id = user_id, another_user_id = another_user_id).all()\n    if len(query) == 0:\n        collect_usr = Collection_User(user_id = user_id, \n                                      another_user_id = another_user_id,\n                                      time = datetime.now())\n                                      #用户user_id 收藏用户 another_user_id\n        db_session.add(collect_usr)\n        db_session.commit()\n        update_collection_num(user_id,another_user_id,True)\n    else:\n        return \"already\"\n    return \"success\"\n\n\ndef collection_special_author_cancel(user_id, special_id):\n    query = db_session.query(Special).filter_by(special_id = special_id).all()\n    another_user_id = query[0].user_id\n    if (user_id == another_user_id):\n        return \"self\"\n    query = db_session.query(Collection_User).filter_by(user_id = user_id, another_user_id = another_user_id).all()\n    if len(query) == 1:\n        db_session.delete(query[0])\n        db_session.commit()\n        update_collection_num(user_id,another_user_id,False)\n    else:\n        return \"already\"\n    return \"success\"\n\n##################################  获取用户角色函数  ####################################\ndef get_role(user_id):\n	result=db_session.query(User.role).filter_by(user_id=user_id).first()\n	return result[0]\n\n\ndef get_user_by_nick(nick):\n	result=db_session.query(User).filter_by(nick=nick).first()\n	return result\n\ndef examine_user_id(user_id):\n	result=db_session.query(User).filter_by(user_id=user_id).all()\n	if len(result)>0:\n		return True\n	else:\n		return False\ndef create_user_collection(another_user_id,user_id):\n	result=db_session.query(Collection_User).filter(and_(Collection_User.user_id==user_id,Collection_User.another_user_id==another_user_id)).all()\n	if len(result)>0:\n		pass\n	else:\n		collection=Collection_User(user_id=user_id,another_user_id=another_user_id,time=datetime.now())\n		db_session.add(collection)\n		db_session.commit()\n		update_collection_num(user_id,another_user_id,True)\n\n\ndef delete_user_collection(another_user_id,user_id):\n	db_session.query(Collection_User).filter(and_(Collection_User.user_id==user_id,Collection_User.another_user_id==another_user_id)).delete()\n	db_session.commit()\n	update_collection_num(user_id,another_user_id,False)\n\ndef update_collection_num(user_id,another_user_id,is_add):\n	user=db_session.query(User).filter_by(user_id=user_id).scalar()\n	another_user=db_session.query(User).filter_by(user_id=another_user_id).scalar()\n	if is_add:\n		user.follow_num+=1\n		another_user.be_followed_num+=1\n	else:\n		user.follow_num-=1\n		another_user.be_followed_num-=1		\n	db_session.commit()\n\ndef get_hot_ground_acticle():\n	result=db_session.query(Article,User.nick).join(User).filter(and_(Article.groups=='1',Article.is_draft=='0')).order_by(desc(Article.coins)).limit(10).all()\n	return result\n\ndef get_most_hot_ground_article():\n	result=db_session.query(Article,User.nick).join(User).filter(and_(Article.groups=='1',Article.is_draft=='0')).order_by(desc(Article.coins)).first()\n	return result\n\ndef get_most_hot_activity(time):\n	result=db_session.query(Activity).filter(Activity.activity_time>time).order_by(desc(Activity.favor)).first()\n	return result\n\ndef get_article_group_by_coin(groups,category):\n	result=db_session.query(Article,User.nick).join(User).filter(and_(Article.groups==groups,Article.category==category,Article.is_draft=='0')).order_by(desc(Article.coins)).limit(10).all()\n	return result\n\n\ndef has_collected(user_id,another_user_id):\n	result=db_session.query(Collection_User).filter(and_(Collection_User.user_id==user_id,Collection_User.another_user_id==another_user_id)).all()\n	if len(result)>0:\n		return 'yes'\n	else:\n		return 'no'\n\n\ndef create_message(to_user_id,user_id,content):\n	message=models.Message(user_id=user_id,to_user_id=to_user_id,content=content,time=datetime.now())\n	#message=models.Message(user_id,to_user_id,content,datetime.now())\n	db_session.add(message)\n	db_session.commit()\n\ndef user_coin_add(user_id,num):\n	user=db_session.query(User).filter_by(user_id=user_id).scalar()\n	user.coin+=num\n	db_session.commit()\ndef user_coin_sub(user_id,num):\n	user=db_session.query(User).filter_by(user_id=user_id).scalar()\n	user.coin-=num\n	db_session.commit()\n\ndef special_coin_add(special_id, num):\n    special = db_session.query(Special).filter_by(special_id = special_id).scalar()\n    special.coin += num\n    db_session.commit()\n\ndef article_coin_add(article_id,num):\n	article=db_session.query(Article).filter_by(article_id=article_id).scalar()\n	article.coins+=num\n	if (article.groups =='3'):\n	    special_coin_add(article.special_id, num)\n	db_session.commit()\n	article=db_session.query(Article).filter_by(article_id=article_id).first()\n	user_coin_add(user_id=article.user_id,num=num)\n\ndef process_article_award(user_id,article_id,award_num):\n	article=db_session.query(Article).filter_by(article_id=article_id).first()\n	if article.user_id==user_id:\n		return 'fail'\n	else:\n		user_coin_sub(user_id=user_id,num=award_num)\n		article_coin_add(article_id=article_id,num=award_num)\n		return 'success'\n\ndef examine_article_id(article_id):\n	result=db_session.query(Article).filter_by(article_id=article_id).all()\n	if len(result)>0:\n		return True\n	else:\n		return False\n\ndef collection_article(user_id,article_id):\n	article=db_session.query(Article).filter_by(article_id=article_id).first()\n	result=db_session.query(Collection_Article).filter(and_(Collection_Article.user_id==user_id,Collection_Article.article_id==article_id)).all()\n	if article.user_id==user_id:\n		return 'fail'\n	elif len(result)>0:\n		return 'already'\n	else:\n		collection_article=Collection_Article(user_id=user_id,article_id=article_id,time=datetime.now())\n		db_session.add(collection_article)\n		db_session.commit()\n		return 'success'\n\ndef collection_activity(user_id,activity_id):\n	result=db_session.query(Collection_Activity).filter(and_(Collection_Activity.activity_id==activity_id,Collection_Activity.user_id==user_id)).all()\n	if len(result)>0:\n		return 'already'\n	else:\n		collection_activity=Collection_Activity(user_id=user_id,activity_id=activity_id,time=datetime.now())\n		db_session.add(collection_activity)\n		db_session.commit()\n		return 'success'\n\ndef update_article_favor(article_id,is_add):\n	article=db_session.query(Article).filter_by(article_id=article_id).scalar()\n	if is_add:\n		article.favor+=1\n	else:\n		article.favor-=1\n	db_session.commit()\n\ndef update_activity_favor(activity_id,is_add):\n	activity=db_session.query(Activity).filter_by(activity_id=activity_id).scalar()\n	if is_add:\n		activity.favor+=1\n	else:\n		activity.favor-=1\n	db_session.commit()\n\n\ndef get_current_activity_list(time):\n	result=db_session.query(Activity).filter(Activity.activity_time>time).all()\n	return result\n\ndef get_passed_activity_list(time):\n	result=db_session.query(Activity).filter(Activity.activity_time<time).order_by(desc(Activity.activity_time)).limit(4).all()\n	return result\n\ndef get_follow_num(user_id):\n	result=db_session.query(Collection_User).filter_by(user_id=user_id).all()\n	return len(result)\n\ndef get_be_followed_num(user_id):\n	result=db_session.query(Collection_User).filter_by(another_user_id=user_id).all()\n	return len(result)\n\n\ndef get_article_pagination_by_user_id(user_id,by_time,page_id):\n	if by_time:\n		query=db_session.query(Article).filter(and_(Article.user_id==user_id,Article.is_draft=='0',Article.special_id==None)).order_by(desc(Article.time))\n	else:\n		query=db_session.query(Article).filter(and_(Article.user_id==user_id,Article.is_draft=='0',Article.special_id==None)).order_by(desc(Article.coins))\n	return paginate(query,page_id,10,False)\n\ndef get_collection_author_list(user_id):\n	result=db_session.query(User).join(Collection_User,Collection_User.another_user_id==User.user_id).filter(Collection_User.user_id==user_id).all()\n	return result\n\ndef get_comment_pagination_by_user_id(user_id,page_id):\n	query=db_session.query(Comment,Article).join(Article).filter(Comment.user_id==user_id).order_by(desc(Comment.time))\n	return paginate(query,page_id,4,False)\n\ndef get_article_draft_pagination(user_id,page_id):\n	query=db_session.query(Article).filter(and_(Article.user_id==user_id,Article.is_draft=='1'))\n	return paginate(query,page_id,10,False)\n\ndef get_article_collection_pagination(user_id,page_id):\n	query=db_session.query(Article,Collection_Article,User).join(Collection_Article,Collection_Article.article_id==Article.article_id).join(User,User.user_id==Article.user_id).filter(Collection_Article.user_id==user_id)\n	return paginate(query,page_id,10,False)\n\ndef get_activity_collection_pagination(user_id,page_id):\n	query=db_session.query(Activity,Collection_Activity).join(Collection_Activity,Collection_Activity.activity_id==Activity.activity_id).filter(Collection_Activity.user_id==user_id)\n	return paginate(query,page_id,10,False)\n\ndef get_user_collection_pagination(user_id,page_id):\n	query=db_session.query(User,Collection_User).join(Collection_User,Collection_User.another_user_id==User.user_id).filter(Collection_User.user_id==user_id)\n	return paginate(query,page_id,10,False)\n\ndef get_special_collection_pagination(user_id,page_id):\n	query=db_session.query(Special,Collection_Special).join(Collection_Special,Collection_Special.special_id==Special.special_id).filter(Collection_Special.user_id==user_id)\n	return paginate(query,page_id,10,False)\n\ndef get_fans_pagination(user_id,page_id):\n	query=db_session.query(User).join(Collection_User,Collection_User.user_id==User.user_id).filter(Collection_User.another_user_id==user_id)\n	return paginate(query,page_id,10,False)\n\n##目前来说，3是管理员\ndef get_message_pagination(user_id,page_id):\n	query=db_session.query(models.Message,User).join(User,User.user_id==models.Message.user_id).filter(and_(models.Message.to_user_id==user_id,User.role!=3))\n	return paginate(query,page_id,4,False)\n\ndef get_received_comment_pagination(user_id,page_id):\n	query=db_session.query(Comment,User,Article).join(User,User.user_id==Comment.user_id).join(Article,Article.article_id==Comment.article_id).filter(Comment.to_user_id==user_id)\n	return paginate(query,page_id,4,False)\n##目前来说，3是管理员\ndef get_notification_pagination(user_id,page_id):\n	query=db_session.query(models.Message).filter(and_(models.Message.to_user_id==user_id,User.role==3))\n	return paginate(query,page_id,4,False)\n\ndef get_special_pagination(user_id,page_id):\n	query=db_session.query(Special).filter(Special.user_id==user_id)\n	return paginate(query,page_id,3,False)\n\ndef get_has_prev(pagination):\n	if pagination.has_prev:\n		return 'yes'\n	else:\n		return 'no'\ndef get_has_next(pagination):\n	if pagination.has_next:\n		return 'yes'\n	else:\n		return 'no'\n\n\n\ndef updata_user_basic_information_by_user_id(user_id,nick,gender,birthday,phone):\n	user=db_session.query(User).filter_by(user_id=user_id).scalar()\n	user.nick=nick\n	user.gender=gender\n	user.birthday=birthday\n	user.phone=phone\n	db_session.commit()\n	##删除原先的头像\n	if birthday==None and phone!=None:\n		return 'success_no_birthday'\n	elif birthday!=None and phone==None:\n		return 'success_no_phone'\n	elif birthday==None and phone==None:\n		return 'success_no_birthday_phone'\n	else:\n		return 'success'\n\ndef update_user_avatar(user_id,avatar):\n	user=db_session.query(User).filter_by(user_id=user_id).scalar()\n	user.photo=avatar\n	db_session.commit()\n	return 'success'\n\ndef update_user_slogon(user_id,slogon):\n	user=db_session.query(User).filter_by(user_id=user_id).scalar()\n	user.slogon=slogon\n	db_session.commit()\n	return 'success'\n\ndef update_member_id(user_id,member_id):\n	user=db_session.query(User).filter_by(user_id=user_id).scalar()\n	user.member_id=member_id\n	try:\n		db_session.commit()\n		return 'success'\n	except:\n		return 'fail'\n\n#######################################  删除一篇文章 start ########################################\n##删除文章的内容文件夹\ndef delete_article_content_folder(article_session_id):\n	try:\n		shutil.rmtree(os.path.join(app.config['ARTICLE_CONTENT_DEST'], str(article_session_id)))\n	except:\n		pass\n##删除文章的题图\ndef delete_article_title_image(picture):\n	picture_path_list=picture.split('/')\n	picture_path_list_length=len(picture_path_list)\n	title_image=picture_path_list[picture_path_list_length-1]\n	if title_image in app.config['DEFAULT_ARTICLE_TITLT_IMAGE']:\n		pass\n	else:\n		try:\n			os.remove(os.path.join(app.config['ARTICLE_TITLE_DEST'],title_image))\n		except:\n			pass\n		\n##删除文章的评论\ndef delete_comments_by_article_id(article_id):\n	db_session.query(Comment).filter(Comment.article_id==article_id).delete()\n	db_session.commit()\n##删除对文章的收藏\ndef delete_collection_article_by_article_id(article_id):\n	db_session.query(Collection_Article).filter(Collection_Article.article_id==article_id).delete()\n	db_session.commit()\n##先删除和这片文章相关的内容\ndef pretreamentment_article_delete(article_id):\n	article=db_session.query(Article).filter_by(article_id=article_id).first()\n	##删除内容文件夹\n	delete_article_content_folder(article.article_session_id)\n	##删除题图\n	delete_article_title_image(article.picture)\n	##删除评论\n	delete_comments_by_article_id(article_id)\n	##删除对该文章的收藏\n	delete_collection_article_by_article_id(article_id)\ndef delete_article_by_article_id(article_id,user_id):\n	article=db_session.query(Article).filter_by(article_id=article_id).first()\n	if article==None or article.user_id!=user_id:\n		return 'fail'\n	else:\n		##先删除和这片文章相关的内容\n		pretreamentment_article_delete(article_id)\n		db_session.query(Article).filter_by(article_id=article_id).delete()\n		db_session.commit()\n		return 'success'\n#######################################  删除一篇文章 end ########################################\n\n\n\n#######################################  删除一条评论 start ########################################\ndef pretreamentment_comment_delete(comment_id):\n	article=db_session.query(Article).join(Comment,Comment.article_id==Article.article_id).filter(Comment.comment_id==comment_id).first()\n	update_comment_num(article.article_id,False)\n\ndef delete_comment_by_comment_id(comment_id,user_id):\n	comment=db_session.query(Comment).filter_by(comment_id=comment_id).first()\n	if comment.user_id!=user_id or comment==None:\n		return 'fail'\n	else:\n		pretreamentment_comment_delete(comment_id)\n		db_session.query(Comment).filter_by(comment_id=comment_id).delete()\n		db_session.commit()\n		return 'success'\n#######################################  删除一条评论 end ########################################\n\n\n\n#######################################  删除一条活动收藏 start ########################################\ndef pretreamentment_collection_artivity_delete(collection_activity_id):\n	activity=db_session.query(Activity).join(Collection_Activity,Collection_Activity.activity_id==Activity.activity_id).filter(Collection_Activity.collection_activity_id==collection_activity_id).first()\n	update_activity_favor(activity.activity_id,False)\n\ndef delete_collection_activity_by_activity_id(collection_activity_id,user_id):\n	collection_activity=db_session.query(Collection_Activity).filter_by(collection_activity_id=collection_activity_id).first()\n	if collection_activity.user_id!=user_id or collection_activity==None:\n		return 'fail'\n	else:\n		pretreamentment_collection_artivity_delete(collection_activity_id)\n		db_session.query(Collection_Activity).filter_by(collection_activity_id=collection_activity_id).delete()\n		db_session.commit()\n		##更新相关信息\n		return 'success'\n#######################################  删除一条活动收藏 end ########################################\n\n\n#######################################  删除一条文章收藏 start ########################################\ndef pretreamentment_collection_article_delete(collection_article_id):\n	article=db_session.query(Article).join(Collection_Article,Collection_Article.article_id==Article.article_id).filter(Collection_Article.collection_article_id==collection_article_id).first()\n	update_article_favor(article.article_id,False)\n\ndef delete_collection_article_by_collection_article_id(collection_article_id,user_id):\n	collection_article=db_session.query(Collection_Article).filter_by(collection_article_id=collection_article_id).first()\n	if collection_article.user_id!=user_id or collection_article==None:\n		return 'fail'\n	else:\n		pretreamentment_collection_article_delete(collection_article_id)\n		db_session.query(Collection_Article).filter_by(collection_article_id=collection_article_id).delete()\n		db_session.commit()\n		return 'success'\n#######################################  删除一条文章收藏 end ########################################\n\n#######################################  删除一条私信 start ########################################\ndef pretreamentment_message_delete(message_id):\n	pass\ndef delete_message_by_message_id(message_id,user_id):\n	message=db_session.query(models.Message).filter(models.Message.message_id==message_id).first()\n	if message.to_user_id!=user_id or message==None:\n		return 'fail'\n	else:\n		pretreamentment_message_delete(message_id)\n		db_session.query(models.Message).filter(models.Message.message_id==message_id).delete()\n		db_session.commit()\n		return 'success'\n#######################################  删除一条私信 end ########################################\n\n#######################################  删除一条接收到的评论 start ########################################\ndef pretreamentment_received_comment_delete(received_comment_id):\n	article=db_session.query(Article).join(Comment,Comment.article_id==Article.article_id).filter(Comment.comment_id==received_comment_id).first()\n	update_comment_num(article.article_id,False)\n\ndef delete_received_comment_by_comment_id(received_comment_id,user_id):\n	comment=db_session.query(Comment).filter_by(comment_id=received_comment_id).first()\n	if comment.to_user_id!=user_id or comment==None:\n		return 'fail'\n	else:\n		pretreamentment_received_comment_delete(received_comment_id)\n		db_session.query(Comment).filter_by(comment_id=received_comment_id).delete()\n		db_session.commit()\n		return 'success'\n#######################################  删除一条接收到的评论 end ########################################\n\n#######################################  删除一个专栏 start ########################################\n\ndef delete_collection_special_by_special_id(special_id):\n	db_session.query(Collection_Special).filter(Collection_Special.special_id==special_id).delete()\n	db_session.commit()\n\ndef delete_articles_by_special_id(special_id):\n	articles=db_session.query(Article).filter(Article.special_id==special_id).all()\n	if articles==None:\n		pass\n	else:\n		for article in articles:\n			delete_article_by_article_id(article.article_id)\n\ndef pretreamentment_special_delete(special_id):\n	delete_collection_special_by_special_id(special_id)\n	delete_articles_by_special_id(special_id)\n\ndef delete_special_by_special_id(special_id,user_id):\n	special=db_session.query(Special).filter(Special.special_id==special_id).first()\n	if special.user_id!=user_id or special==None:\n		return 'fail'\n	else:\n		pretreamentment_special_delete(special_id)\n		db_session.query(Special).filter_by(special_id=special_id).delete()\n		db_session.commit()\n		return 'success'\n#######################################  删除一个专栏 end ########################################		\n\n",
			"file": "functions.py",
			"file_size": 50107,
			"file_write_time": 130803204998896186,
			"settings":
			{
				"buffer_size": 37696,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "D:\\迅雷下载\\adt-bundle-windows-x86_64-20131030\\adt-bundle-windows-x86_64-20131030\\sdk\\tools;\n\nC:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;%JAVA_HOME%\\bin;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;%SystemRoot%\\system32;%SystemRoot%;%SystemRoot%\\System32\\Wbem;%SYSTEMROOT%\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;D:\\Program Files (x86)\\MacType;%CATALINA_HOME%\\lib;%CATALINA_HOME%\\bin;D:\\Program Files (x86)\\CTEX\\UserData\\miktex\\bin;D:\\Program Files (x86)\\CTEX\\MiKTeX\\miktex\\bin;D:\\Program Files (x86)\\CTEX\\CTeX\\ctex\\bin;D:\\Program Files (x86)\\CTEX\\CTeX\\cct\\bin;D:\\Program Files (x86)\\CTEX\\CTeX\\ty\\bin;D:\\Program Files (x86)\\CTEX\\Ghostscript\\gs8.70\\bin;D:\\Program Files (x86)\\CTEX\\GSview\\gsview;D:\\Program Files (x86)\\CTEX\\WinEdt;D:\\Program Files (x86)\\Matlab2014\\runtime\\win64;D:\\Program Files (x86)\\Matlab2014\\bin;D:\\Program Files (x86)\\Matlab2014\\polyspace\\bin;C:\\Program Files (x86)\\IVI Foundation\\VISA\\WinNT\\Bin\\;C:\\Program Files\\IVI Foundation\\VISA\\Win64\\Bin\\;C:\\Program Files (x86)\\IVI Foundation\\VISA\\WinNT\\Bin;C:\\Program Files (x86)\\Java\\jre7\\bin\\client;C:\\Program Files (x86)\\IVI Foundation\\IVI\\bin;C:\\Program Files\\IVI Foundation\\IVI\\bin;C:\\Program Files\\TortoiseSVN\\bin;C:\\Program Files (x86)\\Bitvise SSH Client;D:\\Python27\\Scripts;D\\Python27\\",
			"settings":
			{
				"buffer_size": 1430,
				"line_ending": "Windows",
				"name": "D:\\迅雷下载\\adt-bundle-windows-x86_64-20131030\\adt-bun"
			}
		},
		{
			"contents": "@import url(\"screen.css\");\n@import url(\"non-screen.css\") handheld;\n@import url(\"non-screen.css\") only screen and (max-device-width:640px);\n\n#top { \ndisplay:block;  \ncolor: white;\nwidth:40px; \nheight:25px;\nposition:fixed;  \nbottom:50px;  \nright:40px; \nborder-radius:10px 10px 10px 10px;   \ntext-decoration:none;  \ntext-align:center;\ndisplay:none;  \nbackground-color:purple; \nopacity:0.6;    \n}",
			"file": "/C/cygwin64/home/morning/morningmoni.github.io/stylesheets/core.css",
			"file_size": 392,
			"file_write_time": 130681222506946689,
			"settings":
			{
				"buffer_size": 392,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# -*- coding: utf-8 -*-\n'''\n\n	数据库基础模块\n\n	定义db_session，用于和数据库进行交互\n	定义Base类，作为父类，被子类继承，形成数据表类\n	定义init_db函数，用于初始化数据表\n'''\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import scoped_session, sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n\nDB_URL='mysql://root:1234@localhost/xichao?charset=utf8'\nengine = create_engine(DB_URL, echo=True, convert_unicode=True)\n\ndb_session = scoped_session(sessionmaker(autocommit=False,\n                                         autoflush=False,\n                                         bind=engine))\nBase = declarative_base()\nBase.query = db_session.query_property()\n\n\n#建立数据库时一定要建立成utf8编码的，mysql的相应字符配置需要更改\ndef init_db():\n    import models\n    Base.metadata.create_all(bind=engine)\n\n    # 对初始化进行测试\n    test_db()\n\n\ndef test_db():\n    # test_size > 10\n    test_size = 15\n    Total_Article = 0\n    Total_Activity = 0\n    ##先导入操作数据库所需的所有函数\n    from functions import encrypt\n    from time import sleep\n    ##上传路径\n    ##关于上传路径是前端的事情,这里的url只是示例,具体url格式由前端决定\n    \n    \n    ##添加主页信息\n    from models import HomePage\n    home = HomePage(special1 = 1, special2 = 3, special3 = 5, special4 = 7)\n    db_session.add(home)\n    db_session.commit()\n    \n    ##测试用户\n    from datetime import datetime, timedelta\n    from models import User\n\n    for i in range(test_size):\n        user = User(nick = \"Nick%d\"%(i+1), email = \"example%d@example.com\"%(i+1), \n                    role = 1, register_time = datetime.now(),\n                    slogon = u\"用户 Nick%d 的个人介绍！\" % (i+1),\n                    last_login_time = datetime.now(), password = encrypt(u\"password\"),\n                    state = '1',photo=u\"/upload/avatar/default.jpg\")\n        db_session.add(user)\n        db_session.commit()\n\n    ##测试管理员\n    user = User(nick = u\"曦潮\", email = u\"xichao@xichao.com\", \n                role = 3, register_time = datetime.now(),\n                slogon = u\"我是管理员！\",\n                last_login_time = datetime.now(), password = encrypt(u\"xichao\"),\n                state = u'1',photo=u'upload/avatar/default1.jpg')\n    db_session.add(user)\n    db_session.commit()\n    \n    ##测试书籍\n    from models import Book\n    book = Book(title = u\"GRE核心词汇考法精析\", ISBN = u\"9787802562547\",\n                       picture =u\"http://img3.douban.com/lpic/s7642485.jpg\", author = u\"陈琦,周书林\",\n                       press = u\"群言出版社\", page_num = u\"449\",\n                       price = u\"55.00元\", press_time=u\"2011-9\",binding=\"平装\")\n    db_session.add(book)\n    db_session.commit()\n\n    ##测试专栏\n    from models import Special\n    for i in range(test_size):\n        special = Special(name = u\"Nick%d的专栏\"%(i+1), user_id = i+1,\n                           picture = u\"/upload/special/special_upload_pic.jpg\", \n                           introduction = u\"Nick%d的专栏 的简介\"%(i+1),\n                           time = datetime.now())\n        db_session.add(special)\n        db_session.commit()\n        sleep(1)\n\n\n    ##添加专栏文章，每个专栏10篇\n    from models import Article\n    for special_id in range(1, test_size+1):\n        for i in range(10):\n            Total_Article += 1\n            article = Article(title = u\"Nick%d的专栏 的 第%d篇文章\"%(special_id, i+1), \n                              picture = u\"/upload/article/article_title_image/article_upload_pic_1.jpg\",\n                              content = u\"本文是 Nick%d的专栏 的 第%d篇文章 的内容\"%(special_id, i), is_draft = '0',\n                              time = datetime.now(), \n                              category = '1',    ## 1表示书评，2表示影评，3表示杂文\n                              groups = '3',     ## 1表示广场，2表示文章，3表示专栏\n                              user_id = special_id, ##special_id和user_id在test创建中是一样的\n                              book_id = 1, special_id = special_id,\n                              article_session_id = Total_Article, abstract = u\"Nick%d的专栏 的 第%d篇文章 的摘要\"%(special_id, i))\n            db_session.add(article)\n            db_session.commit()\n            \n    ##添加10篇广场书评\n    for i in range(10):\n        Total_Article += 1\n        article = Article(title = u\"第%d篇 广场书评\"%(i+1), \n                          picture = u\"/upload/article/article_title_image/article_upload_pic_1.jpg\",\n                          content = u\"本文是 第%d篇 广场书评 的内容\"%(i+1), is_draft = '0',\n                          time = datetime.now(), \n                          category = '1',    ## 1表示书评，2表示影评，3表示杂文\n                          groups = '1',     ## 1表示广场，2表示文章，3表示专栏\n                          user_id = i + 1, ##special_id和user_id在test创建中是一样的\n                          book_id = 1, \n                          article_session_id = Total_Article, abstract = u\"第%d篇 广场书评 的摘要\"%(i+1))\n        db_session.add(article)\n        db_session.commit()\n\n    ##添加10篇广场影评\n    for i in range(10):\n        Total_Article += 1\n        article = Article(title = u\"第%d篇 广场影评\"%(i+1), \n                          picture = u\"/upload/article/article_title_image/article_upload_pic_1.jpg\",\n                          content = u\"本文是 第%d篇 广场影评 的内容\"%(i+1), is_draft = '0',\n                          time = datetime.now(), \n                          category = '2',    ## 1表示书评，2表示影评，3表示杂文\n                          groups = '1',     ## 1表示广场，2表示文章，3表示专栏\n                          user_id = i + 1, ##special_id和user_id在test创建中是一样的\n                          book_id = 1, \n                          article_session_id = Total_Article, abstract = u\"第%d篇 广场影评 的摘要\"%(i+1))\n        db_session.add(article)\n        db_session.commit()\n\n    ##添加10篇广场杂文\n    for i in range(10):\n        Total_Article += 1\n        article = Article(title = u\"第%d篇 广场杂文\"%(i+1), \n                          picture = u\"/upload/article/article_title_image/article_upload_pic_1.jpg\",\n                          content = u\"本文是 第%d篇 广场杂文 的内容\"%(i+1), is_draft = '0',\n                          time = datetime.now(), \n                          category = '3',    ## 1表示书评，2表示影评，3表示杂文\n                          groups = '1',     ## 1表示广场，2表示文章，3表示专栏\n                          user_id = i + 1, ##special_id和user_id在test创建中是一样的\n                          book_id = 1, \n                          article_session_id = Total_Article, abstract = u\"第%d篇 广场杂文 的摘要\"%(i+1))\n        db_session.add(article)\n        db_session.commit()\n\n\n    ##添加对应的Article_session\n    from models import Article_session\n    for i in range(Total_Article):\n      article_session = Article_session()\n      db_session.add(article_session)\n      db_session.commit()\n\n    \n    ##测试评论\n    \"\"\"\n    from models import Comment\n    comment = Comment(article_id = 1, content = u\"这篇文章写的真好啊！\",\n                       user_id = 2, to_user_id = 1,\n                       time = datetime.now())\n    db_session.add(comment)\n    db_session.commit()\n    \"\"\"\n    \n    \n\n    ##测试私信\n    \"\"\"\n    from models import Message\n    message = Message(user_id = 1, to_user_id = 2,\n                      content = u\"谢谢你评论我的文章\", time = datetime.now())\n    db_session.add(message)\n    db_session.commit()\n    \"\"\"\n\n\n\n    ##添加过去活动\n    from models import Activity\n    for i in range(5):\n        ##曦潮童汇\n        Total_Activity += 1\n        activity = Activity(name = u\"曦潮童汇 第%d期\"%(i+1), content = u\"小朋友们看过来\",\n                            create_time = datetime.now(), \n                            activity_time = datetime.now(),\n                            activity_session_id=Total_Activity,\n                            picture=u'/upload/activity/activity_title_image/activity_upload_pic_1.jpg',\n                            abstract=u\"小朋友们看过来......\",place=u\"曦潮书店\") \n        db_session.add(activity)\n        db_session.commit()\n\n    ##添加未来活动\n    from models import Activity\n    for i in range(5):\n        ##曦潮童汇\n        Total_Activity += 1\n        activity = Activity(name = u\"曦潮童汇 第%d期\"%(i+6), content = u\"小朋友们看过来\",\n                            create_time = datetime.now(), \n                            activity_time = datetime.now() + timedelta(days=100),\n                            activity_session_id=Total_Activity,\n                            picture=u'/upload/activity/activity_title_image/activity_upload_pic_1.jpg',\n                            abstract=u\"小朋友们看过来......\",place=u\"曦潮书店\") \n        db_session.add(activity)\n        db_session.commit()\n\n\n    ##测试活动会话id\n    from models import Activity_session\n    for i in range(Total_Activity):\n        activity_session=Activity_session()\n        db_session.add(activity_session)\n        db_session.commit()\n    \n\n    ##测试对活动的评论\n\"\"\"\n    from models import Comment_activity\n    comment_activity = Comment_activity(activity_id=1,content=u\"这个活动真赞啊\",user_id=1,time=datetime.now())\n    db_session.add(comment_activity)\n    db_session.commit()\n\"\"\"\n\n\"\"\"    \n    ##测试活动收藏\n    from models import Collection_Activity\n    collect_act = Collection_Activity(user_id = 1, \n                                      activity_id = 1,\n                                      time = datetime.now())\n    db_session.add(collect_act)\n    db_session.commit()\n    \n    ##测试文章收藏\n    from models import Collection_Article\n    collect_art = Collection_Article(user_id = 2, \n                                     article_id = 1,\n                                     time = datetime.now())\n    db_session.add(collect_art)\n    db_session.commit()\n    \n    ##测试专栏收藏\n    from models import Collection_Special\n    collect_spe = Collection_Special(user_id = 2, \n                                     special_id = 1,\n                                     time = datetime.now())\n    db_session.add(collect_spe)\n    db_session.commit()\n    \n    ##测试用户收藏\n    from models import Collection_User\n    collect_usr = Collection_User(user_id = 2, \n                                  another_user_id = 1,\n                                  time = datetime.now())\n                                  #用户2收藏用户1\n    db_session.add(collect_usr)\n    db_session.commit()\n    \n    ##测试曦潮记产品\n    from models import Product\n    product = Product(name = u\"明信片\", picture = u\"URL for 产品图片\",\n                      number = 100, price = u\"￥5.00\")\n    db_session.add(product)\n    db_session.commit()\n\"\"\"\n",
			"file": "database.py",
			"file_size": 12421,
			"file_write_time": 130804290454331337,
			"settings":
			{
				"buffer_size": 9962,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"ssc",
				"Set Syntax: C++"
			],
			[
				"ssp",
				"Set Syntax: Python"
			],
			[
				"",
				"Package Control: Remove Package"
			],
			[
				"pc",
				"Package Control: Install Package"
			],
			[
				"ssxml",
				"Set Syntax: XML"
			],
			[
				"pc ",
				"Package Control: Install Package"
			],
			[
				"p",
				"Package Control: Install Package"
			],
			[
				"pcip",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Preferences: Browse Packages"
			],
			[
				"ssht",
				"Set Syntax: HTML"
			],
			[
				"sshtm",
				"Set Syntax: HTML"
			],
			[
				"sss",
				"Set Syntax: SQL"
			],
			[
				"ss",
				"Set Syntax: SQL (Rails)"
			],
			[
				"sspy",
				"Set Syntax: Python"
			],
			[
				"c",
				"File: Close All"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"fca",
				"File: Close All"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 174.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/cygwin64/home/morning/CoverSearch/static/4musicsearch.css",
		"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/runserver.py",
		"/D/Users/morning/Desktop/question",
		"/C/cygwin64/home/morning/CoverSearch/templates/pic.html",
		"/D/study/电工导c/6-lucene_2/exp6-pic-search.py",
		"/C/cygwin64/home/morning/CoverSearch/web.py",
		"/C/cygwin64/home/morning/CoverSearch/templates/search.html",
		"/D/Users/morning/Desktop/getInfo.py",
		"/C/cygwin64/home/morning/morningmoni.github.io/index.html",
		"/D/study/CS/第三学期/1043. 完全二叉树.cpp",
		"/D/study/GPA计算/GPA.txt",
		"/D/study/CS/IntelliJ Projects/xwang8/.git/config",
		"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/xichao_db.sql",
		"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/config.py",
		"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/welcome.html",
		"/C/cygwin64/home/morning/CoverSearch/templates/album.html",
		"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/xichao.py",
		"/D/study/CS/第二学期/数独判定.cpp",
		"/D/study/CS/第二学期/1208. 大圣切蛋糕.cpp",
		"/D/study/CS/第三学期/1039. 顺序存储二叉树.cpp",
		"/D/Users/morning/Desktop/hack/src/ghp_inject.cpp",
		"/D/Users/morning/Desktop/hack/src/addnum.cpp",
		"/D/Users/morning/Desktop/laboratory/wifi修改版_v1.1/MyWifiClient2/src/net/ysng/mywificlient/MyWifiClient.java",
		"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/functions.py",
		"/D/Users/morning/Desktop/python_hack/my_debugger.py",
		"/D/game/CoCos/hello/Classes/AppDelegate.cpp",
		"/D/Users/morning/Desktop/1202. bigint.cpp",
		"/D/study/CS/第二学期/1049火车调度.cpp",
		"/D/study/CS/第二学期/1038. 二哥的约瑟夫.cpp",
		"/d/Users/morning/Desktop/ttt",
		"/D/Users/morning/Desktop/syp.cpp",
		"/C/cygwin64/home/morning/xichao-new/README.md",
		"/D/Users/morning/Desktop/shortcuts",
		"/C/Users/morning/AppData/Roaming/Sublime Text 2/Packages/User/CTags.sublime-settings",
		"/D/study/tou",
		"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/models.py",
		"/C/Users/morning/AppData/Roaming/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/C/Users/morning/AppData/Roaming/Sublime Text 2/Packages/User/sublime_jedi.sublime-settings",
		"/C/Users/morning/AppData/Roaming/Sublime Text 2/Packages/Jedi - Python autocompletion/README.md",
		"/d/Users/morning/Desktop/t).py",
		"/D/study/CS/第二学期/1206. pascal.cpp",
		"/D/Users/morning/Desktop/1207.cpp",
		"/D/study/CS/第三学期/1036-syp.cpp",
		"/D/Users/morning/Desktop/1.cpp",
		"/C/Users/morning/AppData/Roaming/Sublime Text 2/Packages/C++/C++.sublime-build",
		"/C/Users/morning/AppData/Roaming/Sublime Text 2/Packages/Default/exec.py",
		"/d/Users/morning/Desktop/1207. ferry.cpp",
		"/D/Users/morning/Desktop/1036.cpp",
		"/D/Users/morning/Desktop/1036. 二哥去取钱.cpp",
		"/D/Users/morning/Desktop/ttt.cpp",
		"/D/study/CS/第二学期/syp.cpp",
		"/D/study/CS/第二学期/2105.最大矩形.cpp",
		"/C/cygwin64/home/morning/xichao-new/xichao/__init__.py",
		"/d/Users/morning/Desktop/question",
		"/D/game/CoCos/lilyRun/Classes/HelloWorldScene.cpp",
		"/D/game/10250128/Data/Actors.rvdata",
		"/d/Users/morning/Desktop/CO&A_hw1.txt",
		"/D/Users/morning/Desktop/robot simulation/Program111/Tsl/2014 simulation 530/baseball round all 903/BasketBall Round2/Round 3_100_05daicaipan bizhang test/Robotics Environment Simulator.xml",
		"/D/study/CS/第二学期/高精度.cpp",
		"/D/game/CoCos/LuoLiRun3x/proj.win32/main.cpp",
		"/C/Users/morning/hello/proj.android/build_native.py",
		"/D/study/self-present/5130309737_毛宇宁_Scheme/Op.cpp",
		"/D/Users/morning/Documents/LabVIEW Data/MyOmniTest/Robotics Environment Simulator.xml",
		"/d/Users/morning/Desktop/linkQueue.cpp",
		"/D/Users/morning/Desktop/bsTree.cpp",
		"/D/study/CS/第二学期/5130309737_毛宇宁_Scheme/Op.cpp",
		"/D/study/CS/第二学期/5130309737_毛宇宁_Scheme/Num.cpp",
		"/D/study/CS/第二学期/5130309737_毛宇宁_Scheme/myCalculater.cpp",
		"/d/Users/morning/Desktop/1.html",
		"/d/Users/morning/Desktop/my_test.py",
		"/D/Users/morning/Desktop/my_debugger_defines.py",
		"/d/Users/morning/Desktop/my_debugger.py",
		"/D/Users/morning/Desktop/antiTest1.py",
		"/D/study/CS/第二学期/1244原版.cpp",
		"/C/end",
		"/D/study/CS/第二学期/opengl hw.cpp",
		"/D/study/CS/第二学期/1019括号匹配.cpp",
		"/D/study/self-present/ghost gallery/opengl.cpp",
		"/D/study/python/register.py",
		"/D/study/self-present/Songs/flashdir/playlist.xml",
		"/D/Users/morning/Desktop/Exp8/dataset/match.py",
		"/D/study/电工导c/Image1.py",
		"/D/Users/morning/Desktop/Exp9/Dataset/LSH.py",
		"/D/Users/morning/Desktop/Exp9/match.py",
		"/D/Users/morning/Desktop/Exp9/index",
		"/C/cygwin64/home/morning/CoverSearch/templates/coversearch.html",
		"/d/Users/morning/Desktop/123.html",
		"/D/Users/morning/Desktop/getInfo",
		"/C/cygwin64/home/morning/garden.newbee/index.php",
		"/C/xampp/htdocs/garden.newbee/ThinkPHP/Extend/Vendor/Smarty/plugins/function.html_select_date.php",
		"/D/Users/morning/Desktop/web_study/test1.html",
		"/C/cygwin64/home/MySQL2.txt",
		"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/comment.html",
		"/D/Users/morning/Desktop/final_version/run/artist-search.py",
		"/C/cygwin64/home/morning/CoverSearch/static/covers/index",
		"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/list-yang.html",
		"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/article.html",
		"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/edit.html",
		"/D/Users/morning/Desktop/resort.py",
		"/C/cygwin64/home/morning/CoverSearch/LSH.py",
		"/D/Users/morning/Desktop/final_version/run/0.py",
		"/D/Users/morning/Desktop/final_version/run/album-index2.py",
		"/C/cygwin64/home/morning/CoverSearch/templates/comment.html",
		"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/new.html",
		"/D/Users/morning/Desktop/Exp8/exp8.py",
		"/D/Users/morning/Desktop/LUPINUSの子守呗.mp3",
		"/D/user/firstProj/threePeople.ucf",
		"/D/user/exam/top.v",
		"/D/user/exam/low.ucf",
		"/D/user/firstProj/threePeople.v",
		"/D/user/counter/ct.v",
		"/D/user/ct_sub/set.v",
		"/D/user/counter/set.v",
		"/D/user/counter/ct.ucf",
		"/D/user/exam/low.v",
		"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/tables.html",
		"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/static/assets/css/ace.min.css",
		"/D/study/电工导c/6-lucene_2/exp6-pic-index.py",
		"/D/Users/morning/Desktop/7-hadoop_2/7-hadoop_2/mapper.py",
		"/D/Users/morning/Desktop/7-hadoop_2/7-hadoop_2/reducer.py",
		"/D/Users/morning/Desktop/7-hadoop_2/7-hadoop_2/batch_test.sh",
		"/D/Users/morning/Desktop/laboratory/getProf.py",
		"/d/Users/morning/Desktop/mapper.py",
		"/d/Users/morning/Desktop/test.py",
		"/d/Users/morning/Desktop/len_reducer",
		"/C/cygwin64/home/morning/GoogleSearchCrawler/gsearch.py",
		"/D/Users/morning/Desktop/Exp8/dataset/11.py",
		"/D/Users/morning/Desktop/1.py"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"desc",
			"or_",
			"update_",
			"send_verify_email",
			"User",
			"Total_Activity",
			"can_create",
			"all_time",
			"long long",
			"data",
			"	\n",
			"HOST",
			"#",
			"2",
			"1",
			"session",
			"json",
			"os",
			"<a",
			"top",
			"xichao_wechat_web",
			"first",
			"material",
			"cmp",
			"sort",
			"motor",
			"radius",
			"Joint_J0",
			"robot",
			"shuzhi",
			"Motor_Joint_",
			"Motor_",
			"Motor",
			"Sphere",
			"localhost",
			"run2",
			"555",
			"localhost",
			"zhan",
			"this",
			"t",
			"我喜欢",
			"submit",
			"$",
			"result2",
			"res",
			"tmp",
			"img",
			"ALLOWED_EXTENSIONS",
			"file",
			"upload",
			"Request",
			"URL",
			"user_agents",
			"load_user_agen",
			"add_header",
			"print",
			"sleep",
			"q=urllib2.urlopen(a.get('href')).read()",
			"q=urllib2.urlopen(a.get('href')).read()、",
			"q=urllib2.urlopen(a.get('href')).read()",
			"sleep",
			"hover",
			"xichao",
			"font",
			"del",
			"secure_filename",
			"secure",
			"ALLOWED_EXTENSIONS",
			"allowed_file",
			"function showimage(fileInput){\n							var files = fileInput.files;\n					        for (var i = 0; i < files.length; i++) {           \n					            var file = files[i];\n					            var imageType = /image.*/;     \n					            if (!file.type.match(imageType)) {\n					                continue;\n					            }           \n					            var img=document.getElementById(\"thumbnil\");            \n					            img.file = file;    \n					            var reader = new FileReader();\n					            reader.onload = (function(aImg) { \n					                return function(e) { \n					                    aImg.src = e.target.result; \n					                }; \n					            })(img);\n					            reader.readAsDataURL(file);\n					        }    \n\n						}",
			"showimage",
			"file",
			"File",
			"file",
			"File",
			"file",
			"a",
			"A",
			"a",
			"A",
			"a",
			"editor1",
			"CKEDITOR",
			"ckeditor",
			"CKEDITOR",
			"thumbnil",
			"showimage",
			"=\"#\">\n",
			"file",
			"File",
			"file",
			"uploadImg",
			"uploadimage",
			"uploadImage",
			"photoimage",
			"alert",
			"请",
			"<img",
			"Img",
			"i",
			"resize",
			"hidden",
			">>>",
			">>>>>>>",
			">>>>>>",
			">>>>>",
			">>>>",
			"doc",
			"localImag",
			"file",
			"filename",
			"file",
			"get",
			"loop",
			"myM",
			"modal",
			"submit",
			"search_results",
			"keypoint",
			"title",
			"post_from",
			"url_for",
			"title",
			"l",
			"Inner",
			"inner",
			"<script src=\"{{url_for('static',filename='assets/js/ace.min.js')}}\"></script>\n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "forms.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1898,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 330.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "admins.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5992,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3564.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "views.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 79055,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 28409.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "templates/layout_article.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 593,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "templates/square.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10819,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 528.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "templates/layout.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16103,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3211.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "static/css/main.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7919,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 681.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "static/css/square.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6572,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2441.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6363,
						"regions":
						{
						},
						"selection":
						[
							[
								6363,
								6363
							]
						],
						"settings":
						{
							"auto_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 968.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "models.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28665,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7062.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "xichao.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 97,
						"regions":
						{
						},
						"selection":
						[
							[
								86,
								86
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "functions.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37696,
						"regions":
						{
						},
						"selection":
						[
							[
								480,
								480
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 12,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1430,
						"regions":
						{
						},
						"selection":
						[
							[
								1430,
								1430
							]
						],
						"settings":
						{
							"auto_name": "D:\\迅雷下载\\adt-bundle-windows-x86_64-20131030\\adt-bun",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/C/cygwin64/home/morning/morningmoni.github.io/stylesheets/core.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 392,
						"regions":
						{
						},
						"selection":
						[
							[
								388,
								388
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "database.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9962,
						"regions":
						{
						},
						"selection":
						[
							[
								856,
								870
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 513.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 142.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "xichao.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"/C/cygwin64/home/morning/xichao-new/xichao/templates/square.html"
			],
			[
				"sq",
				"/C/cygwin64/home/morning/xichao-new/xichao/static/css/square.css"
			],
			[
				"4",
				"/C/cygwin64/home/morning/CoverSearch/static/4musicsearch.css"
			],
			[
				"sear",
				"/C/cygwin64/home/morning/CoverSearch/templates/search.html"
			],
			[
				"main",
				"/C/cygwin64/home/morning/xichao-new/xichao/static/css/main.css"
			],
			[
				"f",
				"/C/cygwin64/home/morning/xichao-new/xichao/functions.py"
			],
			[
				"v",
				"/C/cygwin64/home/morning/xichao-new/xichao/views.py"
			],
			[
				"func",
				"/C/cygwin64/home/morning/xichao-new/xichao/functions.py"
			],
			[
				"l",
				"/C/cygwin64/home/morning/xichao-new/xichao/templates/layout.html"
			],
			[
				"adm",
				"/C/cygwin64/home/morning/xichao-new/xichao/admins.py"
			],
			[
				"q",
				"/D/Users/morning/Desktop/question"
			],
			[
				"mo",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/models.py"
			],
			[
				"data",
				"/C/cygwin64/home/morning/xichao-new/xichao/database.py"
			],
			[
				"c",
				"/C/cygwin64/home/morning/morningmoni.github.io/stylesheets/core.css"
			],
			[
				"1",
				"/D/Users/morning/Desktop/1.cpp"
			],
			[
				".cpp",
				"/D/Users/morning/Desktop/1.cpp"
			],
			[
				"web",
				"/C/cygwin64/home/morning/CoverSearch/web.py"
			],
			[
				"we",
				"/D/Users/morning/Desktop/laboratory/wifi修改版_v1.1/MyWifiClient2/src/net/ysng/mywificlient/MyWifiClient.java"
			],
			[
				"r",
				"/C/cygwin64/home/morning/xichao-new/README.md"
			],
			[
				"10",
				"/D/Users/morning/Desktop/1036.cpp"
			],
			[
				"1036",
				"/D/Users/morning/Desktop/1036. 二哥去取钱.cpp"
			],
			[
				"luc",
				"/D/study/电工导c/6-lucene_2/exp6-pic-search.py"
			],
			[
				"alb",
				"/C/cygwin64/home/morning/CoverSearch/templates/album.html"
			],
			[
				"wel",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/welcome.html"
			],
			[
				"al",
				"/C/cygwin64/home/morning/CoverSearch/templates/album.html"
			],
			[
				"xichao",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/xichao.py"
			],
			[
				"sea",
				"/C/cygwin64/home/morning/CoverSearch/templates/search.html"
			],
			[
				"xi",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/xichao.py"
			],
			[
				"sho",
				"/D/Users/morning/Desktop/shortcuts"
			],
			[
				"ques",
				"/d/Users/morning/Desktop/question"
			],
			[
				"co",
				"/d/Users/morning/Desktop/CO&A_hw1.txt"
			],
			[
				"shor",
				"/D/Users/morning/Desktop/shortcuts"
			],
			[
				"ind",
				"/C/cygwin64/home/morning/morningmoni.github.io/index.html"
			],
			[
				"que",
				"/d/Users/morning/Desktop/question"
			],
			[
				"m",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/models.py"
			],
			[
				"short",
				"/D/Users/morning/Desktop/shortcuts"
			],
			[
				"in",
				"/C/cygwin64/home/morning/morningmoni.github.io/index.html"
			],
			[
				"sh",
				"/D/Users/morning/Desktop/shortcuts"
			],
			[
				"tea",
				"team02@202.120.39.167:5000"
			],
			[
				"team",
				"team02@202.120.39.167:5000"
			],
			[
				"w",
				"/C/cygwin64/home/morning/CoverSearch/web.py"
			],
			[
				"tal",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/tables.html"
			],
			[
				"new",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/new.html"
			],
			[
				"123",
				"/d/Users/morning/Desktop/123.html"
			],
			[
				"cov",
				"/C/cygwin64/home/morning/CoverSearch/templates/coversearch.html"
			],
			[
				"cover",
				"/C/cygwin64/home/coversearch.sql"
			],
			[
				"ta",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/tables.html"
			],
			[
				"pic",
				"/C/cygwin64/home/morning/CoverSearch/templates/pic.html"
			],
			[
				"lsh",
				"/C/cygwin64/home/morning/CoverSearch/LSH.py"
			],
			[
				"p",
				"/C/cygwin64/home/morning/CoverSearch/templates/pic.html"
			],
			[
				"se",
				"/C/cygwin64/home/morning/CoverSearch/templates/search.html"
			],
			[
				"com",
				"/C/cygwin64/home/morning/CoverSearch/templates/comment.html"
			],
			[
				"g",
				"/C/cygwin64/home/morning/GoogleSearchCrawler/gsearch.py"
			],
			[
				"we/",
				"/D/study/电工导c/8-web.py/web.py"
			],
			[
				"s",
				"/C/cygwin64/home/morning/CoverSearch/templates/search.html"
			],
			[
				"a",
				"/C/cygwin64/home/morning/CoverSearch/templates/album.html"
			],
			[
				"tab",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/tables.html"
			],
			[
				"cv",
				"/D/user/ct_sub/ct_sub.v"
			],
			[
				".u",
				"/D/user/counter/ct.ucf"
			],
			[
				"ct",
				"/D/user/ct_sub/ct_sub.v"
			],
			[
				"11",
				"/D/Users/morning/Desktop/Exp8/11.py"
			],
			[
				"1.",
				"/D/Users/morning/Desktop/1.py"
			],
			[
				"ex",
				"/D/Users/morning/Desktop/Exp8/exp8.py"
			],
			[
				"list",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/list-yang.html"
			],
			[
				"ed",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/edit.html"
			],
			[
				"xic",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/xichao.py"
			],
			[
				"edit",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/edit.html"
			],
			[
				"edi",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/edit.html"
			],
			[
				"e",
				"/D/study/电工导c/8-web.py/web.py"
			],
			[
				"n",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/new.html"
			],
			[
				"ar",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/article.html"
			],
			[
				"x",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/xichao_db.sql"
			],
			[
				".sq",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/xichao_db.sql"
			],
			[
				"model",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/models.py"
			],
			[
				"mod",
				"/d/Users/morning/Desktop/modal.html"
			],
			[
				"top",
				"/D/user/exam/top.v"
			],
			[
				"thr",
				"/D/user/firstProj/threePeople.v"
			],
			[
				"t",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/templates/tables.html"
			],
			[
				"te",
				"/d/Users/morning/Desktop/test.html"
			],
			[
				"test",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/app/static/test.html"
			],
			[
				"gs",
				"/C/cygwin64/home/morning/GoogleSearchCrawler/gsearch.py"
			],
			[
				"tes",
				"/d/Users/morning/Desktop/test.html"
			],
			[
				"yun",
				"/D/Users/morning/Desktop/yunxing.py"
			],
			[
				"i",
				"/D/Users/morning/Desktop/Exp7/Image1.py"
			],
			[
				"re",
				"/D/Users/morning/Desktop/7-hadoop_2/7-hadoop_2/reducer.py"
			],
			[
				"map",
				"/D/Users/morning/Desktop/7-hadoop_2/7-hadoop_2/mapper.py"
			],
			[
				"xicha",
				"/C/cygwin64/home/morning/XiChao/xichao_wechat_web/xichao_db.sql"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
